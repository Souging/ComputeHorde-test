@startuml
!pragma teoz true
skinparam sequenceBoxBorderColor #gray
box Facilitator (simplified) #ffb
participant Facilitator
end box
box Validator #eef5ff
participant "Facilitator connection"
participant "Miner Driver"
end box
box Miner #lightyellow
participant "Validator Consumer"
participant "Executor Consumer"
end box
box Executor #efefef
participant Executor
participant "Task/Subprocess"
participant Job
end box

"Facilitator connection" -> Facilitator: Connect
activate Facilitator
|||
...


-> Facilitator: Create job
Facilitator -> Facilitator: Store job
Facilitator -> "Facilitator connection": ""V2JobRequest""
activate "Facilitator connection"
Facilitator -> Facilitator: Reset watchdog
activate Facilitator #lightgreen
rnote right of Facilitator #lightgreen: Watchdog:\nJob received
"Facilitator connection" -> Facilitator: ""V0JobStatusUpdate""\n(Received)

deactivate Facilitator
Facilitator -> Facilitator: Reset watchdog
activate Facilitator #lightgreen
rnote right of Facilitator #lightgreen: Watchdog:\nJob accepted

"Facilitator connection" -> "Facilitator connection": Pick miner
"Facilitator connection" -> "Facilitator connection": Submit celery task
"Facilitator connection" -> "Facilitator connection": Wait for celery task result
activate "Facilitator connection" #lightgreen
rnote right of "Facilitator connection" #lightgreen: celery result timeout
|||
rnote over "Facilitator connection", "Miner Driver": Waiting for celery task to start
|||
activate "Miner Driver" #lightgreen
rnote right of "Miner Driver" #lightgreen: celery task\nTTL
"Miner Driver" -> "Validator Consumer": Connect
activate "Validator Consumer"
"Miner Driver" -> "Validator Consumer": ""V0InitialJobRequest""
activate "Miner Driver" #0c0
rnote right of "Miner Driver" #0c0: initial response\ntimeout (short)
"Validator Consumer" -> "Validator Consumer": Reserve executor from pool
"Validator Consumer" -> "Miner Driver": ""V0AcceptJobRequest""
deactivate "Miner Driver"
"Miner Driver" -> "Facilitator connection": Status update
"Facilitator connection" -> Facilitator: ""V0JobStatusUpdate""\n(Accepted)

deactivate Facilitator
Facilitator -> Facilitator: Reset watchdog
activate Facilitator #lightgreen
rnote right of Facilitator #lightgreen: Watchdog:\nExecutor ready

activate "Miner Driver" #0c0
rnote right of "Miner Driver" #0c0: executor ready\ntimeout
"Validator Consumer" -> Executor: Start executor\n(via vendor code)\n(pass executor TTL to deal with zombie executors)
activate Executor #lightgreen
rnote right of Executor #lightgreen: executor TTL

activate Executor #0c0
rnote right of Executor #0c0: startup timeout (short)
Executor -> "Executor Consumer": Connect
activate "Executor Consumer"
"Executor Consumer" -> Executor: ""V0InitialJobRequest""
Executor -> "Executor": CVE check
Executor -> "Executor": toolkit ver. check
Executor -> Executor: clear old jobs
group docker image in initial details?
note right of Executor: this is only for small images, large job\nimages must be preloaded somewhere else\nor this takes too long
note right of Executor: if image is preloaded, this will exit quickly
Executor -> Executor: pull docker image
end group
Executor -> "Executor Consumer": ""V0ExecutorReadyRequest""
deactivate Executor
"Executor Consumer" -> "Validator Consumer": ""V0ExecutorReadyRequest""
"Validator Consumer" -> "Miner Driver": ""V0ExecutorReadyRequest""
"Miner Driver" -> "Facilitator connection": Status update
deactivate "Miner Driver"
"Facilitator connection" -> Facilitator: ""V0JobStatusUpdate""\n(Executor ready)

deactivate Facilitator
Facilitator -> Facilitator: Reset watchdog
activate Facilitator #lightgreen
rnote right of Facilitator #lightgreen: Watchdog:\nVolumes ready

"Miner Driver" -> "Validator Consumer": ""V0JobRequest""
activate "Miner Driver" #0c0
rnote right of "Miner Driver" #0c0: job timeout
"Validator Consumer" -> "Executor Consumer": ""V0JobRequest""
"Executor Consumer" -> Executor: ""V0JobRequest""
Executor -> "Task/Subprocess": ""unpack_volume()""
activate "Task/Subprocess"
activate Executor #0c0
rnote right of Executor #0c0: download timeout
note right of "Task/Subprocess": Implementation depends\non volume type
note right of "Task/Subprocess": Multi volume does a loop here
"Task/Subprocess" -> "Task/Subprocess": **Download** + unpack
return done
deactivate Executor
deactivate "Task/Subprocess"
Executor -> "Executor Consumer": V0VolumesReady
"Executor Consumer" -> "Validator Consumer": V0VolumesReady
"Validator Consumer" -> "Miner Driver": V0VolumesReady
"Miner Driver" -> "Facilitator connection": Job status update
"Facilitator connection" -> Facilitator: ""V0JobStatusUpdate""\n(Volumes ready)

deactivate Facilitator
Facilitator -> Facilitator: Reset watchdog
activate Facilitator #lightgreen
rnote right of Facilitator #lightgreen: Watchdog:\nExecution done


Executor --> Job: docker run
activate Executor #0c0
rnote right of Executor #0c0: execution timeout
activate Job
Job -> Job: Actual work
Job -> Executor: stdout, stderr
deactivate Job
deactivate Executor
Executor -> "Executor Consumer": V0ExecutionDone
"Executor Consumer" -> "Validator Consumer": V0ExecutionDone
"Validator Consumer" -> "Miner Driver": Job status update
"Miner Driver" -> "Facilitator connection": Job status update
"Facilitator connection" -> Facilitator: ""V0JobStatusUpdate""\n(Execution done)

deactivate Facilitator
Facilitator -> Facilitator: Reset watchdog
activate Facilitator #lightgreen
rnote right of Facilitator #lightgreen: Watchdog:\nJob complete

activate Executor #0c0
rnote right of Executor #0c0: upload timeout
Executor -> Executor: Serialize artifacts
loop ""MultiUploadOutputUploader""
Executor -> Executor: Zip the volume
Executor -> "Task/Subprocess": Start upload
activate "Task/Subprocess"
activate "Task/Subprocess"
activate "Task/Subprocess"
end loop
Executor -> "Task/Subprocess": Upload stdout/stderr
activate "Task/Subprocess"
Executor -> Executor: await upload tasks
"Task/Subprocess" --> Executor: Upload done
deactivate "Task/Subprocess"
"Task/Subprocess" --> Executor: Upload done
deactivate "Task/Subprocess"
"Task/Subprocess" --> Executor: Upload done
deactivate "Task/Subprocess"
"Task/Subprocess" --> Executor: Upload done
deactivate "Task/Subprocess"
Executor -> "Executor Consumer": ""V0JobFinished""
deactivate Executor
deactivate Executor
"Executor Consumer" -> "Validator Consumer": ""V0JobFinished""
deactivate "Executor Consumer"
"Validator Consumer" -> "Miner Driver": ""V0JobFinished""
deactivate "Validator Consumer"
deactivate "Miner Driver"
deactivate "Miner Driver"
rnote over "Facilitator connection": Waiting for celery task result
deactivate "Facilitator connection"
"Facilitator connection" -> Facilitator: ""V0JobStatusUpdate""\n(Complete)

deactivate Facilitator

deactivate "Facilitator connection"
Facilitator -> Facilitator: Store job status
...
|||
@enduml